var app = angular.module('mumshoppe-manage', [
	'ui.router',
	'ui.bootstrap',
	'ajoslin.promise-tracker',
	'controller.alerts',
	'controller.really',
	'shared.partials',
	'manage.partials',
	'manage.controller.groups',
	'manage.controller.products',
	'manage.controller.backings',
	'manage.controller.accent-bows',
	'manage.controller.letters',
	'manage.controller.bears',
	'manage.controller.accessories',
	'manage.controller.image-edit',
	'manage.service.image-edit',
	'service.really',
	'service.group',
	'service.product',
	'service.backing',
	'service.accent-bow',
	'service.letter',
	'service.bear',
	'service.accessory',
	'service.category',
	'service.alert']);

app.config(function($stateProvider, $urlRouterProvider, $httpProvider) {

	// $urlRouterProvider.otherwise('/home');

	$stateProvider
		.state('index', {
			url: '',
			templateUrl: 'index.html'
		})
		.state('base', {
			templateUrl: 'base.html'
		})
		.state('base.options', {
			url: '/options',
			templateUrl: 'options.html'
		})
		.state('base.options.groups', {
			templateUrl: 'options/groups.html',
			controller: 'GroupsController'
		})
		.state('base.options.products', {
			templateUrl: 'options/products.html',
			controller: 'ProductsController'
		})
		.state('base.options.backings', {
			templateUrl: 'options/backings.html',
			controller: 'BackingsController'
		})
		.state('base.options.accentbows', {
			templateUrl: 'options/accent-bows.html',
			controller: 'AccentBowsController'
		})
		.state('base.options.letters', {
			templateUrl: 'options/letters.html',
			controller: 'LettersController'
		})
		.state('base.options.bears', {
			templateUrl: 'options/bears.html',
			controller: 'BearsController'
		})
		.state('base.options.accessories', {
			templateUrl: 'options/accessories.html',
			controller: 'AccessoriesController'
		});

		$httpProvider.defaults.post = {'Content-Type': 'application/x-www-form-urlencoded'};
		$httpProvider.defaults.put = {'Content-Type': 'application/x-www-form-urlencoded'};

});

angular.module('controller.alerts', [])
.controller('AlertsController', ['$scope', 'AlertService', function($scope, AlertService) {
	$scope.closeAlert = AlertService.close;
}]);
angular.module('controller.really', [])
.controller('ReallyController', [
'$scope',
'$modalInstance',
'promiseTracker',
'data',
'callback',
function($scope, $modalInstance, promiseTracker, data, callback) {

	$scope.data = data;
	$scope.cancel = $modalInstance.dismiss;
	$scope.tracker = promiseTracker();

	$scope.confirm = function() {
		var promise = callback();
		if (promise.then) {
			var deferred = $scope.tracker.createPromise();
			promise.then($modalInstance.close, $modalInstance.dismiss).finally(deferred.resolve);
		} else {
			$modalInstance.close();
		}
	}
}]);
angular.module('shop.controller.accent-bows', [])
.controller('AccentBowsController', [
'$scope',
'promiseTracker',
'AlertService',
'AccentBowService',
function($scope, promiseTracker, AlertService, AccentBowService) {

	$scope.bows = [];

	$scope.mumPromise.then(AccentBowService.findAll().then(function(data) {
		$scope.bows = data;
		for (var i = 0; i < $scope.bows.length; i++) {
			$scope.bows[i].tracker = promiseTracker();
			$scope.bows[i].imageUrl = AccentBowService.imageUrl($scope.bows[i].id);
		}
	}, function() {
		AlertService.add('danger', 'Unable to load bows.');
	}));

	$scope.select = function(bow) {
		var target = angular.copy($scope.mum);
		target.accentBow = bow;
		var deferred = bow.tracker.createPromise();

		$scope.save(target).finally(deferred.resolve);
	}
}]);

angular.module('manage.controller.accent-bows', [])
.controller('AccentBowsController', [
'$scope',
'$modal',
'$q',
'AlertService',
'ImageEditService',
'ReallyService',
'GroupService',
'AccentBowService',
function($scope, $modal, $q, AlertService, ImageEditService, ReallyService, GroupService, AccentBowService) {

	$scope.groups = [];
	$scope.bows = [];

	function updateBows() {
		$q.all([
			GroupService.findAll().then(function(data) {
				$scope.groups = data;
			}),
			AccentBowService.findAll().then(function(data) {
				$scope.bows = data;
			})
		]).catch(function(data) {
			AlertService.add('danger', 'Unable to load accent bows.');
		});
	}
	updateBows();

	$scope.openImageModal = function(bow) {
		ImageEditService.open(AccentBowService.imageUrl(bow.id), AccentBowService.uploadImage.bind(null, bow.id));
	}

	$scope.addBow = function(group) {
		var modal = $modal.open({
			size: 'small',
			templateUrl: 'edit-accent-bow.html',
			controller: 'accent-bows.EditAccentBowController',
			resolve: {
				callback: function() { return AccentBowService.create; },
				groups: function() { return $scope.groups; },
				bow: function() { 
					return {
						group: group.id
					}; 
				}
			}
		});
		modal.result.then(updateBows);
	};

	$scope.editBow = function(bow) {
		var modal = $modal.open({
			size: 'small',
			templateUrl: 'edit-accent-bow.html',
			controller: 'accent-bows.EditAccentBowController',
			resolve: {
				callback: function() { return AccentBowService.update.bind(null, bow.id); },
				groups: function() { return $scope.groups; },
				bow: function() {
					var copy = angular.copy(bow);
					copy.group = bow.group.id;
					return copy;
				}
			}
		});
		modal.result.then(updateBows);
	};

	$scope.deleteBow = function(bow) {
		ReallyService.prompt({
			body: 'Are you sure you want to delete the accent bow "' + bow.name + '"?'
		}, AccentBowService.delete.bind(null, bow.id)).result.then(function() {
			AlertService.add('success', 'Successfully deleted the bow.');
			updateBows();
		});
	};

}])
.controller('accent-bows.EditAccentBowController', [
'$scope',
'$modalInstance',
'promiseTracker',
'AlertService',
'callback',
'groups',
'bow',
function($scope, $modalInstance, promiseTracker, AlertService, callback, groups, bow) {
	$scope.bow = bow;
	$scope.groups = groups;

	$scope.tracker = promiseTracker();

	$scope.cancel = $modalInstance.dismiss;

	$scope.save = function() {
		var deferred = $scope.tracker.createPromise();
		var promise = callback($scope.bow).then(function() {
			AlertService.add('success', 'Successfully saved accent bow!');
			$modalInstance.close();
		}, function() {
			AlertService.add('danger', 'Unable to save accent bow.');
			$modalInstance.dismiss();
		}).finally(deferred.resolve);
	}
}]);

angular.module('manage.controller.accessories', [])
.controller('AccessoriesController', [
'$scope',
'$modal',
'$q',
'promiseTracker',
'AlertService',
'ImageEditService',
'ReallyService',
'CategoryService',
'GroupService',
'AccessoryService',
function($scope, $modal, $q, promiseTracker, AlertService, ImageEditService, ReallyService, CategoryService, GroupService, AccessoryService) {

	$scope.categories = [];
	$scope.groups = [];
	$scope.accessories = [];

	$scope.updateCategories = function() {
		CategoryService.findAll().then(function(data) {
			$scope.categories = data;
			for (var i = 0; i < $scope.categories.length; i++) {
				$scope.categories[i].tracker = promiseTracker();
			}
		}, function() {
			AlertService.add('danger', 'Unable to load categories.');
		});
	}
	$scope.updateCategories();

	function updateAccessories() {
		$q.all([
			AccessoryService.findAll().then(function(data) {
				$scope.accessories = data;
			}),
			GroupService.findAll().then(function(data) {
				$scope.groups = data;
			})
		]).catch(function() {
			AlertService.add('danger', 'Unable to load accessories.');
		});
	}
	updateAccessories();

	$scope.openImageModal = function(accessory) {
		ImageEditService.open(AccessoryService.imageUrl(accessory.id), AccessoryService.uploadImage.bind(null, accessory.id));
	}

	$scope.filterAccessories = function(accessory) {
		return !$scope.selectedCategory || accessory.category.id == $scope.selectedCategory;
	}

	$scope.hasGroup = function(accessory, group) {
		for (var i = 0; i < accessory.groups.length; i++) {
			if (accessory.groups[i].id == group.id) {
				return true;
			}
		}
		return false;
	}

	$scope.editCategories = function() {
		var modal = $modal.open({
			size: 'small',
			templateUrl: 'editCategories.html',
			controller: 'accessories.CategoriesController',
			resolve: {
				parentScope: function() { return $scope; }
			}
		});

		modal.result.finally($scope.updateCategories);
		return modal;
	}

	$scope.addAccessory = function() {
		var modal = $modal.open({
			size: 'small',
			templateUrl: 'editAccessory.html',
			controller: 'accessories.EditAccessoryController',
			resolve: {
				callback: function() { return AccessoryService.create; },
				groups: function() { return $scope.groups; },
				categories: function() { return $scope.categories; },
				accessory: function() {
					return {
						category: $scope.selectedCategory
					};
				}
			}
		});

		modal.result.then(updateAccessories);
		return modal;
	};

	$scope.editAccessory = function(accessory) {
		var modal = $modal.open({
			size: 'small',
			templateUrl: 'editAccessory.html',
			controller: 'accessories.EditAccessoryController',
			resolve: {
				callback: function() { return AccessoryService.update.bind(null, accessory.id); },
				groups: function() { return $scope.groups; },
				categories: function() { return $scope.categories; },
				accessory: function() {
					var copy = angular.copy(accessory);
					copy.category = copy.category ? copy.category.id : null;
					copy.groups = {};
					angular.forEach(accessory.groups, function(group) {
						copy.groups[group.id] = true;
					});
					return copy;
				}
			}
		});

		modal.result.then(updateAccessories);
		return modal;
	};

	$scope.deleteAccessory = function(accessory) {
		ReallyService.prompt({
			body: 'Are you sure you want to delete the accessory "' + accessory.name + '"?'
		}, AccessoryService.delete.bind(null, accessory.id)).result.then(function() {
			AlertService.add('success', 'Successfully deleted the accessory.');
			updateAccessories();
		});
	};

}])
.controller('accessories.CategoriesController', [
'$scope',
'$modalInstance',
'promiseTracker',
'AlertService',
'CategoryService',
'parentScope',
function($scope, $modalInstance, promiseTracker, AlertService, CategoryService, parentScope) {

	$scope.close = $modalInstance.close;
	$scope.addTracker = promiseTracker();
	$scope.parentScope = parentScope;
	parentScope.updateCategories();

	$scope.addCategory = function() {
		var deferred = $scope.addTracker.createPromise();
		CategoryService.create({
			name: $scope.categoryName
		}).then(function() {
			parentScope.updateCategories();
			$scope.categoryName = "";
		}, function() {
			AlertService.add('danger', 'Unable to save category');
			$modalInstance.dismiss();
		}).finally(deferred.resolve);
	}

	$scope.deleteCategory = function(category) {
		var deferred = category.tracker.createPromise();
		CategoryService.delete(category.id).then(parentScope.updateCategories, function() {
			AlertService.add('danger', 'Unable to delete category.');
			$modalInstance.dismiss();
		}).finally(deferred.resolve);
	}

}])
.controller('accessories.EditAccessoryController', [
'$scope',
'$modalInstance',
'promiseTracker',
'AlertService',
'callback',
'groups',
'categories',
'accessory',
function($scope, $modalInstance, promiseTracker, AlertService, callback, groups, categories, accessory) {

	$scope.groups = groups;
	$scope.categories = categories;
	$scope.accessory = accessory;
	$scope.tracker = promiseTracker();

	$scope.cancel = $modalInstance.dismiss;
	$scope.save = function() {

		var deferred = $scope.tracker.createPromise();

		var accessory = angular.copy($scope.accessory);
		accessory.groups = [];
		angular.forEach($scope.accessory.groups, function(value, key) {
			if (value) {
				accessory.groups.push(key);
			}
		});

		callback(accessory).then(function() {
			AlertService.add('success', 'Successfully saved accessory.');
			$modalInstance.close();
		}, function() {
			AlertService.add('danger', 'Unable to save accessory.');
			$modalInstance.close();
		}).finally(deferred.resolve);
	}

}]);

angular.module('manage.controller.backings', [])
.controller('BackingsController', [
'$scope',
'$modal',
'$q',
'AlertService',
'ImageEditService',
'ReallyService',
'ProductService',
'GroupService',
'BackingService',
function($scope, $modal, $q, AlertService, ImageEditService, ReallyService, ProductService, GroupService, BackingService) {

	$scope.products = [];
	$scope.backings = [];

	function updateBackings() {
		$q.all([
			ProductService.findAll().then(function(data) {
				$scope.products = data;
			}),
			BackingService.findAll().then(function(data) {
				$scope.backings = data;
			})
		]).catch(function(data) {
			AlertService.add('danger', 'Unable to load backings.');
		});
	}
	updateBackings();

	$scope.openImageModal = function(backing) {
		ImageEditService.open(BackingService.imageUrl(backing.id), BackingService.uploadImage.bind(null, backing.id));
	}

	var groups;
	GroupService.findAll().then(function(data) {
		groups = data;
	});

	$scope.addBacking = function(product) {
		var modal = $modal.open({
			size: 'small',
			templateUrl: 'editBacking.html',
			controller: 'backings.EditBackingController',
			resolve: {
				callback: function() { return BackingService.create; },
				groups: function() { return groups; },
				backing: function() { 
					return {
						product: product.id
					}; 
				},
				products: function() { return $scope.products; }
			}
		});
		modal.result.then(updateBackings);
	}

	$scope.editBacking = function(backing) {
		var modal = $modal.open({
			size: 'small',
			templateUrl: 'editBacking.html',
			controller: 'backings.EditBackingController',
			resolve: {
				callback: function() { return BackingService.update.bind(null, backing.id); },
				groups: function() { return groups; },
				backing: function() {
					var copy = angular.copy(backing);
					copy.product = backing.product.id;
					copy.group = backing.group.id;
					return copy;
				},
				products: function() { return $scope.products; }
			}
		});
		modal.result.then(updateBackings);
	}

	$scope.deleteBacking = function(backing) {
		ReallyService.prompt({
			body: 'Are you sure you want to delete the backing "' + backing.name + '"?'
		}, BackingService.delete.bind(null, backing.id)).result.then(function() {
			AlertService.add('success', 'Successfully deleted backing.');
			updateBackings();
		});
	}

}])
.controller('backings.EditBackingController', [
'$scope',
'$modalInstance',
'promiseTracker',
'AlertService',
'callback',
'groups',
'products',
'backing',
function($scope, $modalInstance, promiseTracker, AlertService, callback, groups, products, backing) {

	$scope.backing = backing;
	$scope.groups = groups;
	$scope.products = products;

	$scope.tracker = promiseTracker();

	$scope.cancel = $modalInstance.dismiss;

	$scope.save = function() {
		var deferred = $scope.tracker.createPromise();
		var promise = callback($scope.backing).then(function() {
			AlertService.add('success', 'Successfully saved backing!');
			$modalInstance.close();
		}, function() {
			AlertService.add('danger', 'Unable to saving backing.');
			$modalInstance.dismiss();
		}).finally(deferred.resolve);
	}

}]);

angular.module('manage.controller.groups', [])
.controller('GroupsController', [
'$scope',
'$modal',
'AlertService',
'ReallyService',
'GroupService',
function($scope, $modal, AlertService, ReallyService, GroupService) {

	$scope.groups = [];

	function updateGroups() {
  		GroupService.findAll().then(function(data) {
  			$scope.groups = data;
  		}, function(data) {
  			AlertService.add('danger', 'Unable to load groups.');
  		});
  	}
  	updateGroups();

		$scope.addGroup = function() {
			var modal = $modal.open({
				size: 'small',
				templateUrl: 'editGroup.html',
				controller: 'groups.EditGroupController',
				resolve: {
					callback: function() { return GroupService.create; },
					group: function() { return {}; }
				}
			});

			modal.result.then(updateGroups);

			return modal;
		};

		$scope.editGroup = function(group) {
			var modal = $modal.open({
				size: 'small',
				templateUrl: 'editGroup.html',
				controller: 'groups.EditGroupController',
				resolve: {
					callback: function() { return GroupService.update.bind(null, group.id); },
					group: function() { return angular.copy(group); }
				}
			});

			modal.result.then(updateGroups);

			return modal;
		}

		$scope.deleteGroup = function(group) {
			ReallyService.prompt({
				body: 'Are you sure you want to delete the group "' + group.name + '"?'
			}, GroupService.delete.bind(null, group.id)).result.then(function() {
				AlertService.add('success', 'Successfully deleted group.');
				updateGroups();
			});
		};

}])
.controller('groups.EditGroupController', [
'$scope',
'$modalInstance',
'promiseTracker',
'AlertService',
'callback',
'group',
function($scope, $modalInstance, promiseTracker, AlertService, callback, group) {

	$scope.group = group;
	$scope.tracker = promiseTracker();

	$scope.cancel = function() {
		$modalInstance.dismiss();
	}

	$scope.save = function() {
		var deferred = $scope.tracker.createPromise();
		var promise = callback($scope.group).then(function() {
			AlertService.add('success', 'Successfully saved group!');
			$modalInstance.close();
		}, function() {
			AlertService.add('danger', 'An error occured while saving the group.');
			$modalInstance.dismiss();
		}).finally(deferred.resolve);
	}

}]);

angular.module('manage.controller.image-edit', [])
.controller('ImageEditController', [
'$scope',
'$modalInstance',
'AlertService',
'promiseTracker',
'imageUrl',
'uploadAction',
function($scope, $modalInstance, AlertService, promiseTracker, imageUrl, uploadAction) {

	$scope.tracker = promiseTracker();
	$scope.cancel = $modalInstance.dismiss;
	$scope.imageUrl = imageUrl;

	$scope.dataURI;

	$scope.save = function() {
		var bytestring;
		if ($scope.dataURI.split(',')[0].indexOf('base64') >= 0) {
			byteString = atob($scope.dataURI.split(',')[1]);
		} else {
			byteString = unescoape($scope.dataURI.split(',')[1]);
		}
		var mime = $scope.dataURI.split(',')[0].split(':')[1].split(';')[0];

		var arr = new Uint8Array(byteString.length);
		for (var i = 0; i < byteString.length; i++) {
			arr[i] = byteString.charCodeAt(i);
		}
		var file = new Blob([arr], {type: mime});

		var deferred = $scope.tracker.createPromise();
		uploadAction(file).then(function() {
			AlertService.add('success', 'Successfully uploaded image.');
			$modalInstance.close();
		}, function() {
			AlertService.add('danger', 'An error occured while uploading the image.');
			$modalInstance.dismiss();
		}).finally(deferred.resolve);
	}

	$scope.onUpload = function(event) {
		var reader = new FileReader();
		reader.onloadend = function(event) {
			var img = new Image();
			img.src = reader.result;
			img.onload = function() {
				var max = 250;
				var imageWidth = img.width;
				var imageHeight = img.height;

				var factor = max / Math.max(img.width, img.height);
				if (factor < 1) {
					imageWidth = img.width * factor;
					imageHeight = img.height * factor;
				}

				var canvas = document.getElementById('newImageCanvas');
				canvas.width = imageWidth;
				canvas.height= imageHeight;

				var ctx = canvas.getContext('2d');
				ctx.drawImage(this, 0, 0, imageWidth, imageHeight);

				$scope.dataURI = canvas.toDataURL('image/png');
			}
		}
		reader.readAsDataURL(event.target.files[0]);
	}

}]);

angular.module('manage.controller.letters', [])
.controller('LettersController', [
'$scope',
'$modal',
'AlertService',
'ReallyService',
'LetterService',
function($scope, $modal, AlertService, ReallyService, LetterService) {

	$scope.letters = [];

	function updateLetters() {
  		LetterService.findAll().then(function(data) {
  			$scope.letters = data;
  		}, function(data) {
  			AlertService.add('danger', 'Unable to load letters.');
  		});
  	}
  	updateLetters();

		$scope.addLetter = function() {
			var modal = $modal.open({
				size: 'small',
				templateUrl: 'editLetter.html',
				controller: 'letters.EditLetterController',
				resolve: {
					callback: function() { return LetterService.create; },
					letter: function() { return {}; }
				}
			});

			modal.result.then(updateLetters);

			return modal;
		};

		$scope.editLetter = function(letter) {
			var modal = $modal.open({
				size: 'small',
				templateUrl: 'editLetter.html',
				controller: 'letters.EditLetterController',
				resolve: {
					callback: function() { return LetterService.update.bind(null, letter.id); },
					letter: function() { return angular.copy(letter); }
				}
			});

			modal.result.then(updateLetters);

			return modal;
		}

		$scope.deleteLetter = function(letter) {
			ReallyService.prompt({
				body: 'Are you sure you want to delete the letter "' + letter.name + '"?'
			}, LetterService.delete.bind(null, letter.id)).result.then(function() {
				AlertService.add('success', 'Successfully deleted letter.');
				updateLetters();
			});
		}

}])
.controller('letters.EditLetterController', [
'$scope',
'$modalInstance',
'promiseTracker',
'AlertService',
'callback',
'letter',
function($scope, $modalInstance, promiseTracker, AlertService, callback, letter) {

	$scope.letter = letter;
	$scope.tracker = promiseTracker();

	$scope.cancel = function() {
		$modalInstance.dismiss();
	}

	$scope.save = function() {
		var deferred = $scope.tracker.createPromise();
		var promise = callback($scope.letter).then(function() {
			AlertService.add('success', 'Successfully saved letter!');
			$modalInstance.close();
		}, function() {
			AlertService.add('danger', 'An error occured while saving the letter.');
			$modalInstance.dismiss();
		}).finally(deferred.resolve);
	}

}]);

angular.module('manage.controller.products', [])
.controller('ProductsController', [
'$scope',
'$modal',
'AlertService',
'ReallyService',
'ProductService',
function($scope, $modal, AlertService, ReallyService, ProductService) {

	$scope.products = [];

	function updateProducts() {
		ProductService.findAll().then(function(data) {
			$scope.products = data;
		}, function(data) {
			AlertService.add('danger', 'Unable to load products.');
		});
	}
	updateProducts();

	$scope.addProduct = function() {
		var modal = $modal.open({
			size: 'small',
			templateUrl: 'editProduct.html',
			controller: 'products.EditProductController',
			resolve: {
				callback: function() { return ProductService.create; },
				product: function() { return {}; }
			}
		});

		modal.result.then(updateProducts);

		return modal;
	};

	$scope.editProduct = function(product) {
		var modal = $modal.open({
			size: 'small',
			templateUrl: 'editProduct.html',
			controller: 'products.EditProductController',
			resolve: {
				callback: function() { return ProductService.update.bind(null, product.id); },
				product: function() { return angular.copy(product); }
			}
		});

		modal.result.then(updateProducts);

		return modal;
	};

	$scope.deleteProduct = function(product) {
		ReallyService.prompt({
			body: 'Are you sure you want to delete the product "' + product.name + '"?'
		}, ProductService.delete.bind(null, product.id)).result.then(function() {
			AlertService.add('success', 'Successfully deleted group.');
			updateProducts();
		});
	};

}])
.controller('products.EditProductController', [
'$scope',
'$modalInstance',
'promiseTracker',
'AlertService',
'callback',
'product',
function($scope, $modalInstance, promiseTracker, AlertService, callback, product) {
	
	$scope.product = product;
	$scope.tracker = promiseTracker();

	$scope.cancel = $modalInstance.dismiss;

	$scope.save = function() {
		var deferred = $scope.tracker.createPromise();
		var promise = callback($scope.product).then(function() {
			AlertService.add('success', 'Successfully saved product!');
			$modalInstance.close();
		}, function() {
			AlertService.add('danger', 'An error occured while saving the product.');
			$modalInstance.dismiss();
		}).finally(deferred.resolve);
	}

}]);

angular.module('manage.controller.bears', [])
.controller('BearsController', [
'$scope',
'$modal',
'$q',
'AlertService',
'ImageEditService',
'ReallyService',
'BearService',
'GroupService',
function($scope, $modal, $q, AlertService, ImageEditService, ReallyService, BearService, GroupService) {

	$scope.bears = [];
	$scope.groups = [];

	function updateBears() {
		$q.all([
			BearService.findAll().then(function(data) {
				$scope.bears = data;
			}),
			GroupService.findAll().then(function(data) {
				$scope.groups = data;
			})
		]).catch(function() {
			AlertService.add('danger', 'Unable to load bears.');
		});
	}
	updateBears();

	$scope.hasGroup = function(bear, group) {
		for (var i = 0; i < bear.groups.length; i++) {
			if (bear.groups[i].id == group.id) {
				return true;
			}
		}
		return false;
	}

	$scope.openImageModal = function(bear) {
		ImageEditService.open(BearService.imageUrl(bear.id), BearService.uploadImage.bind(null, bear.id));
	}

	$scope.addBear = function() {
		var modal = $modal.open({
			size: 'small',
			templateUrl: 'editBear.html',
			controller: 'bears.EditBearController',
			resolve: {
				callback: function() { return BearService.create; },
				groups: function() { return $scope.groups; },
				bear: function() { return {}; }
			}
		});
		modal.result.then(updateBears);
		return modal;
	};

	$scope.editBear = function(bear) {
		var modal = $modal.open({
			size: 'small',
			templateUrl: 'editBear.html',
			controller: 'bears.EditBearController',
			resolve: {
				callback: function() { return BearService.update.bind(null, bear.id); },
				groups: function() { return $scope.groups; },
				bear: function() {
					var copy = angular.copy(bear);
					copy.groups = {};
					angular.forEach(bear.groups, function(group) {
						copy.groups[group.id] = true;
					});
					return copy;
				}
			}
		});
		modal.result.then(updateBears);
		return modal;
	};

	$scope.deleteBear = function(bear) {
		ReallyService.prompt({
			body: 'Are you sure you want to delete the bear "' + bear.name + '"?'
		}, BearService.delete.bind(null, bear.id)).result.then(function() {
			AlertService.add('success', 'Successfully deleted the bear.');
			updateBears();
		});
	};

}])
.controller('bears.EditBearController', [
'$scope',
'$modalInstance',
'promiseTracker',
'AlertService',
'callback',
'groups',
'bear',
function($scope, $modalInstance, promiseTracker, AlertService, callback, groups, bear) {

	$scope.groups = groups;
	$scope.bear = bear;

	$scope.cancel = $modalInstance.dismiss;
	$scope.tracker = promiseTracker();

	$scope.save = function() {

		var bear = angular.copy($scope.bear);
		bear.groups = [];
		angular.forEach($scope.bear.groups, function(value, key) {
			if (value) {
				bear.groups.push(key);
			}
		});

		var deferred = $scope.tracker.createPromise();
		callback(bear).then(function() {
			AlertService.add('success', 'Successfully saved bear!');
			$modalInstance.close();
		}, function() {
			AlertService.add('danger', 'Unable to save bear.');
			$modalInstance.dismiss();
		}).finally(deferred.resolve);
	}

}]);

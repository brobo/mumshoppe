var app = angular.module('mumshoppe-shop', [
	'ui.router',
	'ui.bootstrap',
	'ajoslin.promise-tracker',
	'shared.partials',
	'shop.partials',
	'controller.alerts',
	'controller.really',
	'shop.controller.home',
	'shop.controller.customize',
	'shop.controller.backings',
	'shop.controller.accent-bows',
	'shop.controller.ribbons',
	'service.alert',
	'service.accent-bow',
	'service.backing',
	'service.really',
	'service.group',
	'service.letter',
	'service.ribbon',
	'service.mum',
	'service.product'
]);

app.config(function($stateProvider, $urlRouterProvider, $httpProvider) {

	$stateProvider
		.state('index', {
			url: ''
		})
		.state('base', {
			templateUrl: 'base.html'
		})
		.state('base.home', {
			url: '/home',
			templateUrl: 'home.html',
			controller: 'HomeController'
		})
		.state('base.customize', {
			url: '/customize/:mum_id',
			templateUrl: 'customize.html',
			controller: 'CustomizeController'
		})
		.state('base.customize.backings', {
			url: '/backings',
			parent: 'base.customize',
			templateUrl: 'customize/backings.html',
			controller: 'BackingsController'
		})
		.state('base.customize.accentbows', {
			url: '/accentbows',
			parent: 'base.customize',
			templateUrl: 'customize/accent-bows.html',
			controller: 'AccentBowsController'
		})
		.state('base.customize.ribbons', {
			url: '/ribbons',
			parent: 'base.customize',
			templateUrl: 'customize/ribbons.html',
			controller: 'RibbonsController'
		})
		.state('base.customize.bears', {
			url: '/bears',
			parent: 'base.customize',
			template: 'Bears'
		})
		.state('base.customize.accessories', {
			url: '/accessories',
			parent: 'base.customize',
			template: 'Accessories'
		});

		$httpProvider.defaults.post = {'Content-Type': 'application/x-www-form-urlencoded'};
		$httpProvider.defaults.put = {'Content-Type': 'application/x-www-form-urlencoded'};

});


angular.module('controller.alerts', [])
.controller('AlertsController', ['$scope', 'AlertService', function($scope, AlertService) {
	$scope.closeAlert = AlertService.close;
}]);
angular.module('controller.really', [])
.controller('ReallyController', [
'$scope',
'$modalInstance',
'promiseTracker',
'data',
'callback',
function($scope, $modalInstance, promiseTracker, data, callback) {

	$scope.data = data;
	$scope.cancel = $modalInstance.dismiss;
	$scope.tracker = promiseTracker();

	$scope.confirm = function() {
		var promise = callback();
		if (promise.then) {
			var deferred = $scope.tracker.createPromise();
			promise.then($modalInstance.close, $modalInstance.dismiss).finally(deferred.resolve);
		} else {
			$modalInstance.close();
		}
	}
}]);
angular.module('shop.controller.accent-bows', [])
.controller('AccentBowsController', [
'$scope',
'promiseTracker',
'AlertService',
'AccentBowService',
function($scope, promiseTracker, AlertService, AccentBowService) {

	$scope.bows = [];

	$scope.mumPromise
	.then(AccentBowService.findAll)
	.then(function(data) {
		$scope.bows = data;
		for (var i = 0; i < $scope.bows.length; i++) {
			$scope.bows[i].tracker = promiseTracker();
			$scope.bows[i].imageUrl = AccentBowService.imageUrl($scope.bows[i].id);
		}
	}, function() {
		AlertService.add('danger', 'Unable to load bows.');
	});

	$scope.select = function(bow) {
		var target = angular.copy($scope.mum);
		target.accentBow = bow;
		var deferred = bow.tracker.createPromise();

		$scope.save(target).finally(deferred.resolve);
	}
}]);

angular.module('shop.controller.backings', [])
.controller('BackingsController', [
'$scope',
'promiseTracker',
'AlertService',
'BackingService',
function($scope, promiseTracker, AlertService, BackingService) {

	$scope.backings = [];

	$scope.mumPromise
	.then(BackingService.findAll)
	.then(function(data) {
		$scope.backings = data;
		for (var i = 0; i < $scope.backings.length; i++) {
			$scope.backings[i].tracker = promiseTracker();
			$scope.backings[i].imageUrl = BackingService.imageUrl($scope.backings[i].id);
		}
	}, function() {
		AlertService.add('danger', 'Unable to load backings.');
	});

	$scope.select = function(backing) {
		var target = angular.copy($scope.mum);
		target.backing = backing;
		var deferred = backing.tracker.createPromise();

		$scope.save(target).finally(deferred.resolve);
	}


}]);

angular.module('shop.controller.customize', [])
.controller('CustomizeController', [
'$scope',
'$stateParams',
'promiseTracker',
'AlertService',
'MumService',
function($scope, $stateParams, promiseTracker, AlertService, MumService) {

	$scope.mum_id = $stateParams.mum_id;
	$scope.mum = {};

	$scope.mumTracker = promiseTracker();
	var deferred = $scope.mumTracker.createPromise();

	$scope.mumPromise = MumService.findById($scope.mum_id).then(function(data) {
		$scope.mum = data;
		deferred.resolve();
		console.log($scope.mum);
	}, function() {
		AlertService.add('danger', 'Unable to load the mum.');
	});

	$scope.save = function(mum) {
		var target = angular.copy(mum);

		if (target.backing) target.backing = target.backing.id;
		if (target.accentBow) target.accentBow = target.accentBow.id;
		if (target.ribbons) {
			for (var i = 0; i < target.ribbons.length; i++) {
				target.ribbons[i].letter = target.ribbons[i].letter.id;
			}
		}
		return MumService.update($scope.mum.id, target).then(function(data) {
			console.log(data);
			$scope.mum = data;
		}, function() {
			AlertService.add('danger', 'Unable to save the mum.');
		});
	};

}]);

angular.module('shop.controller.home', [])
.controller('HomeController', [
'$scope',
'$modal',
'$q',
'AlertService',
'GroupService',
'ProductService',
'BackingService',
'MumService',
function($scope, $modal, $q, AlertService, GroupService, ProductService, BackingService, MumService) {

	$scope.groups = [];
	$scope.products = [];
	$scope.backings = [];

	$q.all([
		GroupService.findAll().then(function(data) {
			$scope.groups = data;
		}),
		ProductService.findAll().then(function(data) {
			$scope.products = data;
		}),
		BackingService.findAll().then(function(data) {
			$scope.backings = data;
			for (var i = 0; i < $scope.backings.length; i++) {
				$scope.backings[i].imageUrl = BackingService.imageUrl($scope.backings[i].id);
			}

		})
	]).catch(function() {
		AlertService.add('danger', 'Failed to load mum creation data. Please refresh and try again.');
	});

	function updateMums() {
		MumService.findAll().then(function(data) {
			$scope.mums = data;
		}, function() {
			AlertService.add('danger', 'Failed to load mums.');
		});
	}
	updateMums();
	

	$scope.createMum = function() {
		return $modal.open({
			size: 'large',
			templateUrl: 'createMum.html',
			controller: 'home.CreateController',
			resolve: {
				groups: function() { return $scope.groups; },
				products: function() { return $scope.products; },
				backings: function() { return $scope.backings; }
			}
		});
	};

}])
.controller('home.CreateController', [
'$scope',
'$modalInstance',
'promiseTracker',
'MumService',
'groups',
'products',
'backings',
function($scope, $modalInstance, promiseTracker, MumService, groups, products, backings) {

	$scope.groups = groups;
	$scope.products = products;
	$scope.backings = backings;

	for (var i = 0; i < $scope.backings.length; i++) {
		$scope.backings[i].tracker = promiseTracker();
	}

	$scope.create = function(backing) {
		var deferred = backing.tracker.createPromise();
		MumService.create({
			backing: backing.id
		}).then(function() {
			console.log('Success!');
		}, function(error) {
			console.error(error);
		}).finally(deferred.resolve);
	}

}]);

angular.module('shop.controller.ribbons', [])
.controller('RibbonsController', [
'$scope',
'$modal',
'$q',
'promiseTracker',
'AlertService',
'LetterService',
'RibbonService',
function($scope, $modal, $q, promiseTracker, AlertService, LetterService, RibbonService) {

	$scope.tracker = promiseTracker();
	$scope.letters = [];

	LetterService.findAll().then(function(data) {
		$scope.letters = data;
		console.log($scope.letters);
	}, function() {
		AlertService.add('danger', 'Unable to load letters.');
	});

	$scope.addRibbon = function() {
		var modal = $modal.open({
			size: 'medium',
			templateUrl: 'editRibbon.html',
			controller: 'EditRibbonsController',
			resolve: {
				callback: function() {
					return function(ribbon) {
						return RibbonService.create(ribbon).then(function(data) {
							$scope.mum.ribbons.push(data);
						});
					};
				},
				saveMum: function() {
					return function() {
						return $scope.save($scope.mum);
					};
				},
				letters: function() {
					return $scope.letters;
				},
				ribbon: function() {
					return {
						mum: $scope.mum.id
					};
				}
			}
		});
	};

	$scope.editRibbon = function(ribbonIndex) {
		var modal = $modal.open({
			size: 'medium',
			templateUrl: 'editRibbon.html',
			controller: 'EditRibbonsController',
			resolve: {
				callback: function() {
					return function(target) {
						return RibbonService.update(target.id, target).then(function(data) {
							$scope.mum.ribbons[ribbonIndex] = data;
						});
					};
				},
				saveMum: function() {
					return function() {
						return $scope.save($scope.mum);
					};
				},
				letters: function() {
					return $scope.letters;
				},
				ribbon: function() {
					var target = angular.copy($scope.mum.ribbons[ribbonIndex]);
					target.mum = $scope.mum.id;
					return target;
				}
			}
		});
	}

	$scope.deleteRibbon = function(index) {
		var ribbon = $scope.mum.ribbons[index];
		ribbon.tracker = promiseTracker();
		var deferred = ribbon.tracker.createPromise();
		RibbonService.delete(ribbon.id).then(function() {
			$scope.mum.ribbons.splice(index, 1);
		}, function() {
			AlertService.add('danger', 'Unable to delete name ribbon.');
		}).finally(deferred.resolve);
	};

}])
.controller('EditRibbonsController', [
'$scope',
'$modalInstance',
'promiseTracker',
'AlertService',
'callback',
'saveMum',
'letters',
'ribbon',
function($scope, $modalInstance, promiseTracker, AlertService, callback, saveMum, letters, ribbon) {

	$scope.letters = letters;
	$scope.ribbon = ribbon;	
	$scope.tracker = promiseTracker();

	$scope.cancel = $modalInstance.dismiss;

	$scope.save = function() {
		var deferred = $scope.tracker.createPromise();
		var target = angular.copy($scope.ribbon);
		target.letter = target.letter.id;
		callback(target).then($modalInstance.close, function() {
			AlertService.add('danger', 'Unable to save name ribbon.');
			$modalInstance.dismiss();
		}).then(saveMum).finally(deferred.resolve);
	};

}]);

var app = angular.module('mumshoppe-manage', [
	'ui.router',
	'ui.bootstrap',
	'ajoslin.promise-tracker',
	'controller.alerts',
	'controller.really',
	'manage.partials',
	'manage.controller.groups',
	'manage.controller.products',
	'manage.controller.backings',
	'manage.controller.accentbows',
	'manage.controller.letters',
	'manage.controller.bears',
	'manage.controller.accessories',
	'service.really',
	'service.group',
	'service.product',
	'service.backing',
	'service.accentbow',
	'service.letter',
	'service.bear',
	'service.accessory',
	'service.category',
	'service.alert']);

app.config(function($stateProvider, $urlRouterProvider, $httpProvider) {

	// $urlRouterProvider.otherwise('/home');

	$stateProvider
		.state('index', {
			url: '',
			templateUrl: 'index.html'
		})
		.state('base', {
			templateUrl: 'base.html'
		})
		.state('base.options', {
			url: '/options',
			templateUrl: 'options.html'
		})
		.state('base.options.groups', {
			templateUrl: 'options/groups.html',
			controller: 'groupsController'
		})
		.state('base.options.products', {
			templateUrl: 'options/products.html',
			controller: 'productsController'
		})
		.state('base.options.backings', {
			templateUrl: 'options/backings.html',
			controller: 'backingsController'
		})
		.state('base.options.accentbows', {
			templateUrl: 'options/accentbows.html',
			controller: 'accentbowsController'
		})
		.state('base.options.letters', {
			templateUrl: 'options/letters.html',
			controller: 'lettersController'
		})
		.state('base.options.bears', {
			templateUrl: 'options/bears.html',
			controller: 'bearsController'
		})
		.state('base.options.accessories', {
			templateUrl: 'options/accessories.html',
			controller: 'accessoriesController'
		});

		$httpProvider.defaults.post = {'Content-Type': 'application/x-www-form-urlencoded'};
		$httpProvider.defaults.put = {'Content-Type': 'application/x-www-form-urlencoded'};

});

angular.module('controller.alerts', [])
	.controller('AlertsController', ['$scope', 'AlertService', function($scope, AlertService) {
		$scope.closeAlert = AlertService.closeAlert;
	}]);
angular.module('controller.really', [])
	.controller('ReallyController', [
	'$scope',
	'$modalInstance',
	'promiseTracker',
	'data',
	'callback',
	function($scope, $modalInstance, promiseTracker, data, callback) {

		$scope.data = data;
		$scope.cancel = modalInstance.dismiss;
		$scope.tracker = promiseTracker();

		$scope.confirm = function() {
			var promise = callback();
			if (promise.then) {
				var deferred = $scope.tracker.createPromise();
				promise.then($modalInstance.close, $modalInstance.dismiss).finally(deferred.resolve);
			} else {
				$modalInstance.close();
			}
		}
	}]);
angular.module('manage.controller.accentbows', [])
	.controller('accentbowsController', [
	'$scope',
	'$modal',
	'$q',
	'AlertService',
	'ReallyService',
	'GroupService',
	'AccentBowService',
	function($scope, $modal, $q, AlertService, ReallyService, GroupService, AccentBowService) {

		function updateBows() {
			$q.all([
				GroupService.findAll().success(function(data) {
					$scope.groups = data;
				}),
				AccentBowService.findAll().success(function(data) {
					$scope.bows = data;
				})
			]).catch(function(data) {
				AlertService.add('danger', 'Unable to load accent bows.');
			});
		}
		updateBows();

		$scope.addBow = function(group) {
			var modal = $modal.open({
				size: 'small',
				templateUrl: 'editAccentBow.html',
				controller: 'accentbows.editAccentBowController',
				resolve: {
					callback: function() { return AccentBowService.create; },
					groups: function() { return $scope.groups; },
					bow: function() { 
						return {
							group: group.id
						}; 
					}
				}
			});
			modal.result.then(updateBows);
		};

		$scope.editBow = function(bow) {
			var modal = $modal.open({
				size: 'small',
				templateUrl: 'editAccentBow.html',
				controller: 'accentbows.editAccentBowController',
				resolve: {
					callback: function() { return AccentBowService.update.bind(null, bow.id); },
					groups: function() { return $scope.groups; },
					bow: function() {
						var copy = angular.copy(bow);
						copy.group = bow.group.id;
						return copy;
					}
				}
			});
			modal.result.then(updateBows);
		};

		$scope.deleteBow = function(bow) {
			ReallyService.prompt({
				body: 'Are you sure you want to delete the accent bow "' + bow.name + '"?'
			}, AccentBowService.delete.bind(null, bow.id)).result.then(function() {
				AlertService.add('success', 'Successfully deleted the bow.');
				updateBows();
			});
		};

	}])
	.controller('accentbows.editAccentBowController', [
	'$scope',
	'$modalInstance',
	'promiseTracker',
	'AlertService',
	'callback',
	'groups',
	'bow',
	function($scope, $modalInstance, promiseTracker, AlertService, callback, groups, bow) {
		$scope.bow = bow;
		$scope.groups = groups;

		$scope.tracker = promiseTracker();

		$scope.cancel = $modalInstance.dismiss;

		$scope.save = function() {
			var deferred = $scope.tracker.createPromise();
			var promise = callback($scope.bow).success(function() {
				AlertService.add('success', 'Successfully saved accent bow!');
				$modalInstance.close();
			}).error(function() {
				AlertService.add('danger', 'Unable to save accent bow.');
				$modalInstance.dismiss();
			}).finally(deferred.resolve);
		}
	}]);

angular.module('manage.controller.accessories', [])
	.controller('accessoriesController', [
	'$scope',
	'$modal',
	'promiseTracker',
	'AlertService',
	'ReallyService',
	'CategoryService',
	'GroupService',
	'AccessoryService',
	function($scope, $modal, promiseTracker, AlertService, ReallyService, CategoryService, GroupService, AccessoryService) {

		$scope.updateCategories = function() {
			CategoryService.findAll().success(function(data) {
				$scope.categories = data;
				for (var i = 0; i < $scope.categories.length; i++) {
					$scope.categories[i].tracker = promiseTracker();
				}
			}).error(function() {
				AlertService.add('danger', 'Unable to load categories.');
			});
		}
		$scope.updateCategories();

		function updateAccessories() {
			AccessoryService.findAll().success(function(data) {
				$scope.accessories = data;
			}).error(function() {
				AlertService.add('danger', 'Unable to load accessories.');
			});
		}
		updateAccessories();

		GroupService.findAll().success(function(data) {
			$scope.groups = data;
		}).error(function() {
			AlertService.add('danger', 'Unable to load groups.');
		});

		$scope.filterAccessories = function(accessory) {
			return !$scope.selectedCategory || accessory.category.id == $scope.selectedCategory;
		}

		$scope.hasGroup = function(accessory, group) {
			for (var i = 0; i < accessory.groups.length; i++) {
				if (accessory.groups[i].id == group.id) {
					return true;
				}
			}
			return false;
		}

		$scope.editCategories = function() {
			var modal = $modal.open({
				size: 'small',
				templateUrl: 'editCategories.html',
				controller: 'accessories.categoriesController',
				resolve: {
					parentScope: function() { return $scope; }
				}
			});

			modal.result.finally($scope.updateCategories);
			return modal;
		}

		$scope.addAccessory = function() {
			var modal = $modal.open({
				size: 'small',
				templateUrl: 'editAccessory.html',
				controller: 'accessories.editAccessoryController',
				resolve: {
					callback: function() { return AccessoryService.create; },
					groups: function() { return $scope.groups; },
					categories: function() { return $scope.categories; },
					accessory: function() {
						return {
							category: $scope.selectedCategory
						};
					}
				}
			});

			modal.result.then(updateAccessories);
			return modal;
		};

		$scope.editAccessory = function(accessory) {
			var modal = $modal.open({
				size: 'small',
				templateUrl: 'editAccessory.html',
				controller: 'accessories.editAccessoryController',
				resolve: {
					callback: function() { return AccessoryService.update.bind(null, accessory.id); },
					groups: function() { return $scope.groups; },
					categories: function() { return $scope.categories; },
					accessory: function() {
						var copy = angular.copy(accessory);
						copy.category = copy.category ? copy.category.id : null;
						copy.groups = {};
						angular.forEach(accessory.groups, function(group) {
							copy.groups[group.id] = true;
						});
						return copy;
					}
				}
			});

			modal.result.then(updateAccessories);
			return modal;
		};

		$scope.deleteAccessory = function(accessory) {
			ReallyService.prompt({
				body: 'Are you sure you want to delete the accessory "' + accessory.name + '"?'
			}, AccessoryService.delete.bind(null, accessory.id)).result.then(function() {
				AlertService.add('success', 'Successfully deleted the accessory.');
				updateAccessories();
			});
		};

	}])
	.controller('accessories.categoriesController', [
	'$scope',
	'$modalInstance',
	'promiseTracker',
	'AlertService',
	'CategoryService',
	'parentScope',
	function($scope, $modalInstance, promiseTracker, AlertService, CategoryService, parentScope) {

		$scope.close = $modalInstance.close;
		$scope.addTracker = promiseTracker();
		$scope.parentScope = parentScope;
		parentScope.updateCategories();

		$scope.addCategory = function() {
			var deferred = $scope.addTracker.createPromise();
			CategoryService.create({
				name: $scope.categoryName
			}).success(function() {
				parentScope.updateCategories();
				$scope.categoryName = "";
			}).error(function() {
				AlertService.add('danger', 'Unable to save category');
				$modalInstance.dismiss();
			}).finally(deferred.resolve);
		}

		$scope.deleteCategory = function(category) {
			var deferred = category.tracker.createPromise();
			CategoryService.delete(category.id).success(parentScope.updateCategories).error(function() {
				AlertService.add('danger', 'Unable to delete category.');
				$modalInstance.dismiss();
			}).finally(deferred.resolve);
		}

	}])
	.controller('accessories.editAccessoryController', [
	'$scope',
	'$modalInstance',
	'promiseTracker',
	'AlertService',
	'callback',
	'groups',
	'categories',
	'accessory',
	function($scope, $modalInstance, promiseTracker, AlertService, callback, groups, categories, accessory) {

		$scope.groups = groups;
		$scope.categories = categories;
		$scope.accessory = accessory;
		$scope.tracker = promiseTracker();

		$scope.cancel = $modalInstance.dismiss;
		$scope.save = function() {

			var deferred = $scope.tracker.createPromise();

			var accessory = angular.copy($scope.accessory);
			accessory.groups = [];
			angular.forEach($scope.accessory.groups, function(value, key) {
				if (value) {
					accessory.groups.push(key);
				}
			});

			callback(accessory).success(function() {
				AlertService.add('success', 'Successfully saved accessory.');
				$modalInstance.close();
			}).error(function() {
				AlertService.add('danger', 'Unable to save accessory.');
				$modalInstance.close();
			}).finally(deferred.resolve);
		}

	}]);

angular.module('manage.controller.backings', [])
	.controller('backingsController', [
	'$scope',
	'$modal',
	'$q',
	'AlertService',
	'ReallyService',
	'ProductService',
	'GroupService',
	'BackingService',
	function($scope, $modal, $q, AlertService, ReallyService, ProductService, GroupService, BackingService) {

		function updateBackings() {
			$q.all([
				ProductService.findAll().success(function(data) {
					$scope.products = data;
				}),
				BackingService.findAll().success(function(data) {
					$scope.backings = data;
				})
			]).catch(function(data) {
				AlertService.add('danger', 'Unable to load backings.');
			});
		}
		updateBackings();

		var groups;
		GroupService.findAll().success(function(data) {
			groups = data;
		});

		$scope.addBacking = function(product) {
			var modal = $modal.open({
				size: 'small',
				templateUrl: 'editBacking.html',
				controller: 'backings.editBackingController',
				resolve: {
					callback: function() { return BackingService.create; },
					groups: function() { return groups; },
					backing: function() { 
						return {
							product: product.id
						}; 
					},
					products: function() { return $scope.products; }
				}
			});
			modal.result.then(updateBackings);
		}

		$scope.editBacking = function(backing) {
			var modal = $modal.open({
				size: 'small',
				templateUrl: 'editBacking.html',
				controller: 'backings.editBackingController',
				resolve: {
					callback: function() { return BackingService.update.bind(null, backing.id); },
					groups: function() { return groups; },
					backing: function() {
						var copy = angular.copy(backing);
						copy.product = backing.product.id;
						copy.group = backing.group.id;
						return copy;
					},
					products: function() { return $scope.products; }
				}
			});
			modal.result.then(updateBackings);
		}

		$scope.deleteBacking = function(backing) {
			ReallyService.prompt({
				body: 'Are you sure you want to delete the backing "' + backing.name + '"?'
			}, BackingService.delete.bind(null, backing.id)).result.then(function() {
				AlertService.add('success', 'Successfully deleted backing.');
				updateBackings();
			});
		}

	}])
	.controller('backings.editBackingController', [
	'$scope',
	'$modalInstance',
	'promiseTracker',
	'AlertService',
	'callback',
	'groups',
	'products',
	'backing',
	function($scope, $modalInstance, promiseTracker, AlertService, callback, groups, products, backing) {

		$scope.backing = backing;
		$scope.groups = groups;
		$scope.products = products;

		$scope.tracker = promiseTracker();

		$scope.cancel = $modalInstance.dismiss;

		$scope.save = function() {
			var deferred = $scope.tracker.createPromise();
			var promise = callback($scope.backing).success(function() {
				AlertService.add('success', 'Successfully saved backing!');
				$modalInstance.close();
			}).error(function() {
				AlertService.add('danger', 'Unable to saving backing.');
				$modalInstance.dismiss();
			}).finally(deferred.resolve);
		}

	}]);

angular.module('manage.controller.bears', [])
	.controller('bearsController', [
	'$scope',
	'$modal',
	'AlertService',
	'ReallyService',
	'BearService',
	'GroupService',
	function($scope, $modal, AlertService, ReallyService, BearService, GroupService) {

		function updateBears() {
			BearService.findAll().success(function(data) {
				$scope.bears = data;
			}).error(function() {
				AlertService.add('danger', 'Unable to load bears.');
			});
		}
		updateBears();

		GroupService.findAll().success(function(data) {
			$scope.groups = data;
		}).error(function() {
			AlertService.add('danger', 'Unable to load groups.');
		});

		$scope.hasGroup = function(bear, group) {
			for (var i = 0; i < bear.groups.length; i++) {
				if (bear.groups[i].id == group.id) {
					return true;
				}
			}
			return false;
		}

		$scope.openAddModal = function() {
			var modal = $modal.open({
				size: 'small',
				templateUrl: 'editBear.html',
				controller: 'bears.editBearController',
				resolve: {
					callback: function() { return BearService.create; },
					groups: function() { return $scope.groups; },
					bear: function() { return {}; }
				}
			});
			modal.result.then(updateBears);
			return modal;
		};

		$scope.openEditModal = function(bear) {
			var modal = $modal.open({
				size: 'small',
				templateUrl: 'editBear.html',
				controller: 'bears.editBearController',
				resolve: {
					callback: function() { return BearService.update.bind(null, bear.id); },
					groups: function() { return $scope.groups; },
					bear: function() {
						var copy = angular.copy(bear);
						copy.groups = {};
						angular.forEach(bear.groups, function(group) {
							copy.groups[group.id] = true;
						});
						return copy;
					}
				}
			});
			modal.result.then(updateBears);
			return modal;
		};

		$scope.deleteBear = function(bear) {
			ReallyService.prompt({
				body: 'Are you sure you want to delete the bear "' + bear.name + '"?'
			}, BearService.delete.bind(null, bear.id)).result.then(function() {
				AlertService.add('success', 'Successfully deleted the bear.');
				updateBears();
			});
		};

	}])
	.controller('bears.editBearController', [
	'$scope',
	'$modalInstance',
	'promiseTracker',
	'AlertService',
	'callback',
	'groups',
	'bear',
	function($scope, $modalInstance, promiseTracker, AlertService, callback, groups, bear) {

		$scope.groups = groups;
		$scope.bear = bear;

		$scope.cancel = $modalInstance.dismiss;
		$scope.tracker = promiseTracker();

		$scope.save = function() {

			var bear = angular.copy($scope.bear);
			bear.groups = [];
			angular.forEach($scope.bear.groups, function(value, key) {
				if (value) {
					bear.groups.push(key);
				}
			});

			var deferred = $scope.tracker.createPromise();
			callback(bear).then(function() {
				AlertService.add('success', 'Successfully saved bear!');
				$modalInstance.close();
			}, function() {
				AlertService.add('danger', 'Unable to save bear.');
				$modalInstance.dismiss();
			}).finally(deferred.resolve);
		}

	}]);

angular.module('manage.controller.groups', [])
	.controller('groupsController', [
	'$scope',
	'$modal',
	'AlertService',
	'ReallyService',
	'GroupService',
	function($scope, $modal, AlertService, ReallyService, GroupService) {

		function updateGroups() {
	  		GroupService.findAll().success(function(data) {
	  			$scope.groups = data;
	  		}).error(function(data) {
	  			AlertService.add('danger', 'Unable to load groups.');
	  		});
	  	}
	  	updateGroups();

  		$scope.openAddModal = function() {
  			var modal = $modal.open({
  				size: 'small',
  				templateUrl: 'editGroup.html',
  				controller: 'groups.editGroupController',
  				resolve: {
  					callback: function() { return GroupService.create; },
  					group: function() { return {}; }
  				}
  			});

  			modal.result.then(updateGroups);

  			return modal;
  		};

  		$scope.openEditModal = function(group) {
  			var modal = $modal.open({
  				size: 'small',
  				templateUrl: 'editGroup.html',
  				controller: 'groups.editGroupController',
  				resolve: {
  					callback: function() { return GroupService.update.bind(null, group.id); },
  					group: function() { return angular.copy(group); }
  				}
  			});

  			modal.result.then(updateGroups);

  			return modal;
  		}

  		$scope.delete = function(group) {
  			ReallyService.prompt({
  				body: 'Are you sure you want to delete the group "' + group.name + '"?'
  			}, GroupService.delete.bind(null, group.id)).result.then(function() {
  				AlertService.add('success', 'Successfully deleted group.');
  				updateGroups();
  			});
  		};

	}])
	.controller('groups.editGroupController', [
	'$scope',
	'$modalInstance',
	'promiseTracker',
	'AlertService',
	'callback',
	'group',
	function($scope, $modalInstance, promiseTracker, AlertService, callback, group) {

		$scope.group = group;
		$scope.tracker = promiseTracker();

		$scope.cancel = function() {
			$modalInstance.dismiss();
		}

		$scope.save = function() {
			var promise = callback($scope.group).success(function() {
				AlertService.add('success', 'Successfully saved group!');
				$modalInstance.close();
			}).error(function() {
				AlertService.add('danger', 'An error occured while saving the group.');
				$modalInstance.dismiss();
			});
			$scope.tracker.addPromise(promise);
		}

	}]);

angular.module('manage.controller.letters', [])
	.controller('lettersController', [
	'$scope',
	'$modal',
	'AlertService',
	'ReallyService',
	'LetterService',
	function($scope, $modal, AlertService, ReallyService, LetterService) {

		function updateLetters() {
	  		LetterService.findAll().success(function(data) {
	  			$scope.letters = data;
	  		}).error(function(data) {
	  			AlertService.add('danger', 'Unable to load letters.');
	  		});
	  	}
	  	updateLetters();

  		$scope.openAddModal = function() {
  			var modal = $modal.open({
  				size: 'small',
  				templateUrl: 'editLetter.html',
  				controller: 'letters.editLetterController',
  				resolve: {
  					callback: function() { return LetterService.create; },
  					letter: function() { return {}; }
  				}
  			});

  			modal.result.then(updateLetters);

  			return modal;
  		};

  		$scope.openEditModal = function(letter) {
  			var modal = $modal.open({
  				size: 'small',
  				templateUrl: 'editLetter.html',
  				controller: 'letters.editLetterController',
  				resolve: {
  					callback: function() { return LetterService.update.bind(null, letter.id); },
  					letter: function() { return angular.copy(letter); }
  				}
  			});

  			modal.result.then(updateLetters);

  			return modal;
  		}

  		$scope.delete = function(letter) {
  			ReallyService.prompt({
  				body: 'Are you sure you want to delete the letter "' + letter.name + '"?'
  			}, LetterService.delete.bind(null, letter.id)).result.then(function() {
  				AlertService.add('success', 'Successfully deleted letter.');
  				updateLetters();
  			});
  		}

	}])
	.controller('letters.editLetterController', [
	'$scope',
	'$modalInstance',
	'promiseTracker',
	'AlertService',
	'callback',
	'letter',
	function($scope, $modalInstance, promiseTracker, AlertService, callback, letter) {

		$scope.letter = letter;
		$scope.tracker = promiseTracker();

		$scope.cancel = function() {
			$modalInstance.dismiss();
		}

		$scope.save = function() {
			var promise = callback($scope.letter).success(function() {
				AlertService.add('success', 'Successfully saved letter!');
				$modalInstance.close();
			}).error(function() {
				AlertService.add('danger', 'An error occured while saving the letter.');
				$modalInstance.dismiss();
			});
			$scope.tracker.addPromise(promise);
		}

	}]);

angular.module('manage.controller.products', [])
	.controller('productsController', [
	'$scope',
	'$modal',
	'AlertService',
	'ReallyService',
	'ProductService',
	function($scope, $modal, AlertService, ReallyService, ProductService) {

		function updateProducts() {
			ProductService.findAll().success(function(data) {
				$scope.products = data;
			}).error(function(data) {
				AlertService.add('danger', 'Unable to load products.');
			});
		}
		updateProducts();

		$scope.openAddModal = function() {
			var modal = $modal.open({
				size: 'small',
				templateUrl: 'editProduct.html',
				controller: 'products.editProductController',
				resolve: {
					callback: function() { return ProductService.create; },
					product: function() { return {}; }
				}
			});

			modal.result.then(updateProducts);

			return modal;
		};

		$scope.openEditModal = function(product) {
			var modal = $modal.open({
				size: 'small',
				templateUrl: 'editProduct.html',
				controller: 'products.editProductController',
				resolve: {
					callback: function() { return ProductService.update.bind(null, product.id); },
					product: function() { return angular.copy(product); }
				}
			});

			modal.result.then(updateProducts);

			return modal;
		};

		$scope.delete = function(product) {
			ReallyService.prompt({
				body: 'Are you sure you want to delete the product "' + product.name + '"?'
			}, ProductService.delete.bind(null, product.id)).result.then(function() {
				AlertService.add('success', 'Successfully deleted group.');
				updateProducts();
			});
		};

	}])
	.controller('products.editProductController', [
	'$scope',
	'$modalInstance',
	'promiseTracker',
	'AlertService',
	'callback',
	'product',
	function($scope, $modalInstance, promiseTracker, AlertService, callback, product) {
		
		$scope.product = product;
		$scope.tracker = promiseTracker();

		$scope.cancel = $modalInstance.dismiss;

		$scope.save = function() {
			var promise = callback($scope.product).success(function() {
				AlertService.add('success', 'Successfully saved product!');
				$modalInstance.close();
			}).error(function() {
				AlertService.add('danger', 'An error occured while saving the product.');
				$modalInstance.dismiss();
			});
			$scope.tracker.addPromise(promise);
		}

	}]);
